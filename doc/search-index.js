var searchIndex = JSON.parse('{\
"lib":{"doc":"","t":"DDSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Moves","Sudoku","UNSOLVED_SUDOKU_FILES","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","count_moves","count_unset","empty","empty","eq","example_solved","fmt","fmt","fmt","from","from","from_file","get_number","get_numbers","into","into","is_correct","is_part_correct","is_set","is_solved","remove_number","set_alone_number","set_missing_numbers","set_number","solve","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lib"]],"d":["","Sudoku. It contains the data of the field and counts the …","Relative Path of solveable Sudokus. The following format …","","","","","Clears a cell","","","","","Returns the number of already taken moves ","Counts the number of cells in the sudoku that are not set","Returns an empty Moves-Set","Returns an empty Sudoku","","Returns an solved Sudoku","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns an Sudoku from File","Returns the number of a cell If no or multible numbers are …","Gets all numbers that are set in a cell as a Vec","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if a sudoku is correctly solved","Checks if their are errors in the sudoku field Boxes may …","Returns true, if the field is set. A single Number is …","Returns true if all numbers are set It doesnt have to be …","Removes a number from a field","Sets the first alone number A alone number is a number …","Finds and sets a missing number in the sudoku field ToDo: …","Sets the number of cell","Solves the sudoku and returns true if it is solvable","","","","","","","","",""],"i":[0,0,1,3,1,3,1,1,3,1,3,1,1,1,3,1,1,1,3,1,1,3,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,3,1,1,3,1,3,1,3,1],"f":[0,0,0,[[]],[[]],[[]],[[]],[[1,2,2]],[3,3],[1,1],[[]],[[]],[1,4],[1,4],[[],3],[[],1],[[1,1],5],[[],1],[[3,6],7],[[1,6],7],[[1,6],7],[[]],[[]],[8,1],[[1,2,2],9],[[1,2,2],[[10,[9]]]],[[]],[[]],[1,5],[1,5],[[1,2,2],5],[1,5],[[1,2,2,9]],[1,5],[1,5],[[1,2,2,9]],[1,5],[[]],[[]],[[],11],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13]],"c":[],"p":[[3,"Sudoku"],[15,"usize"],[3,"Moves"],[15,"u32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[15,"i32"],[3,"Vec"],[3,"String"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
